openapi: 3.0.3
info:
  title: Sociogrammers Student Query Management System - OpenAPI 3.0
  description: This API describes the endpoints available for the software created by Team Sociogrammers for the Software Engineering Project.
  version: "0.0.1"

servers:
  - url: http://127.0.0.1:5000
tags:
  - name: UserAPI
    description: Endpoint to create, read, delete, and update Users
  - name: ResponseAPI_by_response_id
    description: API for Responses by response ID
  - name: ResponseAPI_by_user
    description: API for Responses by User ID
  - name: TicketAll
    description: API for accessing ticket information by any user.
  - name: getResolutionTimes
    description: Access the resolution times for queries.
  - name: flaggedPostAPI
    description: Access all the flagged Posts.
paths:
  /api/user:
    get:
      security: 
        - secret_authtoken: []
      tags:
        - UserAPI
      summary: "Retreive all users"
      description: "Retreive all users"
      operationId: getUsers
      responses:
        '200':
          description: "Retreived all users successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: 
                    type: array
                    items: 
                      $ref: '#/definitions/User'
        '403':
          description: Unauthorized User
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to view this page"
    post:
      security:
        - secret_authtoken: []
      tags:
        - UserAPI
      summary: "Add a new user"
      description: " Add a new user" 
      operationId: postUserAPI
      requestBody: 
        content:
          application/json:
            schema:
              required:
                - email_id
                - role_id
              type: object
              properties:
                email_id:
                  type: string
                  description: "Email address of the user to be added"
                  example: "abc@example.com"
                role_id:
                  type: integer
                  example: 1
                  description: "Role ID to be assigned to the user"
      responses:
        '200':
          description: "Added user successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "User created successfully"
        '403':
          description: Unauthorized User
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to view this page"
    patch:
      security:
        - secret_authtoken: []
      tags:
        - UserAPI
      summary: "Update an existing user"
      description: "Update details of an existing user" 
      operationId: patchUserAPI
      requestBody: 
        content:
          application/json:
            schema:
              required: 
                - user_id
                
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                user_name:
                  type: string
                  example: "myusername"
                email_id:
                  type: string
                  example: "abc@example.com"
                password:
                  type: string
                  example: "password12345"
      responses:
        '200':
          description: "User updated successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: 
                    type: string
                    example: "User updated successfully"
        '403':
          description: Only Admins can edit email
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are can't edit email"
        '400':
          description: "Bad Request. Error in updating user. See message"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "user_id must exist and should be integer"
        
  /api/respResp:
    post:
      tags:
        - ResponseAPI_by_response_id
      summary: Gets the response details for a given response ID.
      description: Get response details for a particular response ID
      operationId: getrespResp
      requestBody:
        content:
          application/json:
            schema:
              required:
                - response_id
              type: object
              properties:
                response_id:
                  type: integer
                  example: 5
                
      responses:
        '200':
          description: Got all responses successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                       $ref: '#/components/schemas/Response'
                       
                    example:  [{
      "response_id": 2,
      "ticket_id": 1,
      "response": "The query you raised has been resolved.",
      "responder_id": 5,
      "response_timestamp": "Fri, 10 Mar 2023 06:36:58 GMT"
    }]
                  status: 
                    type: string
                    example: success    
                      
                
        '403':
          description: Please provide a response_id
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please provide a response_id"
        '404':
          description: "There are no tickets by that ID."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "There are no tickets by that ID."
      security:
        - secret_authtoken: []
   
  /api/respUser:
    post:
      tags:
        - ResponseAPI_by_user
      summary: Finds the responses given by a particular user (Support Agent mainly)
      description: Accessible only by managers to get responses by a particular Support Agent.
      operationId: getrespUser
      requestBody:
        content:
          application/json:
            schema:
              required:
                - responder_id
              type: object
              properties:
                responder_id:
                  type: integer
                  example: 5
      responses:
        '200':
          description: Got all responses successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                       $ref: '#/components/schemas/Response'
                       
                    example:  [{
      "response_id": 2,
      "ticket_id": 1,
      "response": "The query you raised has been resolved.",
      "responder_id": 5,
      "response_timestamp": "Fri, 10 Mar 2023 06:36:58 GMT"
    }]
                  status: 
                    type: string
                    example: success    
                      
                
        '403':
          description: Please provide a responder_id
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please provide a responder_id"
        '404':
          description: "Sorry, you don't have access to this feature!"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Sorry, you don't have access to this feature!"
      security:
        - secret_authtoken: []
  /api/ticketAll:
    get:
      tags:
        - TicketAll
      summary: Gets the ticket details
      description: General Purpose Get request for any user to obtain access to ticket details.
      operationId: getticketAll
      
      responses:
        '200':
          description: Got all responses successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                       $ref: '#/components/schemas/Response'
                       
                    example:  [{
      "ticket_id": 1,
      "title": "Dashboard Not Loading",
      "description": "Unresponsive Dashboard",
      "creation_date": "Fri, 10 Mar 2023 06:36:58 GMT",
      "creator_id": 2,
      "number_of_upvotes": 20,
      "is_read": true,
      "is_open": false,
      "is_offensive": false,
      "is_FAQ": false,
      "rating": 4
    }]
                  status: 
                    type: string
                    example: success    
        '404':
          description: "No tickets found."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No tickets found"
      security:
        - secret_authtoken: []
    patch:
      tags:
        - TicketAll
      summary: Update a ticket with partial/complete information
      description: TicketAll Update
      operationId: patchTicketAll
      requestBody:
        content:
          application/json:
            schema:
              required:
                - ticket_id
              type: object
              properties:
                ticket_id:
                  type: integer
                  example: 5
                title:
                  type: string
                  example: Change my profile photo
                description:
                  type: string
                  example: Requesting change in profile photo
                number_of_upvotes:
                  type: integer
                  example: 100
                is_read:
                  type: boolean
                  example: false
                is_open:
                  type: boolean
                  example: true
                is_offensive:
                  type: boolean
                  example: false
                is_FAQ:
                  type: boolean
                  example: false
                rating:
                  type: integer
                  example: 4
      responses:
        '200':
          description: the chosen ticket was updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "success"
        '403':
          description: Client Side errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Please mention the ticketId field in your form"
        '404':
          description: Error
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "There is no such ticket by that ID."
      security:
        - secret_authtoken: []
    
  /api/getResolutionTimes:
    post:
      tags:
        - getResolutionTimes
      summary: gets resolution times for a particular ticket.
      description: 'Get the resolution time by ticket ID'
      operationId: getgetResolutionTimes
      requestBody:
        content:
          application/json:
            schema:
              required:
                - ticket_id
              type: object
              properties:
                ticket_id:
                  type: integer
                  example: 5
      responses:
        '200':
          description: Got all details successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                       $ref: '#/components/schemas/Response'
                       
                    example:  [{
      "creation_time": "Fri, 10 Mar 2023 06:36:58 GMT",
      "days": 2,
      "microseconds": 583678,
      "resolution_time_datetime_format": "2 days, 21:40:12.583678",
      "response_time": "Fri, 10 Mar 2023 06:36:58 GMT",
      "seconds": 78012,
      "ticket_id": 2,
    }]
                  status: 
                    type: string
                    example: success    
        '404':
          description: "Not authorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to access this feature!"
        
        '403':
          description: "Ticket Not closed yet"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "This ticket has not been closed yet."
      security:
        - secret_authtoken: []
            
  /api/flaggedPosts:
    get:
      tags:
        - flaggedPostAPI
      summary: gets resolution times for a particular ticket.
      description: 'Get the flagged Posts'
      operationId: getflaggedPostAPI
      responses:
        '200':
          description: Got all flagged posts successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                       $ref: '#/components/schemas/Flagged_Post'
                       
                    example:  [{
      "ticket_id": 5,
      "flagger_id": 2,
      "creator_id": 1,
      
    }]
                  status: 
                    type: string
                    example: success    
        '404':
          description: "Not authorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "You are not authorized to access this feature."
      security:
        - secret_authtoken: []
        
    post:
      tags:
        - flaggedPostAPI
      summary: Add a new ticket to the flagged posts database.
      description: Add a new ticket to flagged posts.
      operationId: postflaggedPostAPI
      requestBody:
        content:
          application/json:
            schema:
              required:
                - ticket_id
                - flagger_id
                - creator_id
              type: object
              properties:
                ticket_id:
                  type: integer
                  example: 5
                flagger_id:
                  type: integer
                  example: 2
                creator_id:
                  type: integer
                  example: 1
                
      responses:
        '200':
          description: the chosen ticket was added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
        '403':
          description: Client Side errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "The person who created the post must be a student."
        '404':
          description: Error
          content:
            application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: "You are not authorized to access this feature."
      security:
        - secret_authtoken: []
definitions:
  User:
    required:
        - user_id
        - user_name
        - email_id
        - role_id
    type: object
    properties:
        user_id:
          type: integer
          description: "Internal User ID assigned to each user" 
          example: 1
        user_name:
          type: string
          description: "username corresponding to the user"
          example: "myusername"
        email_id: 
          type: string
          description: "email address corresponding to the user"
          example: "abc@example.com"
        role_id:
          type: integer
          description: "Internal Role ID assigned based on the type of user (student, admin, manager, support agent)"
          example: 1

components:
  schemas:
    User:
      required:
        - password
      allOf:
        - $ref: "#/definitions/User"
      type: object
      properties:
        password:
          type: string
          description: "Password for logging in and authenticating users"
          example: "password12345"
    Flagged_Post:
      required:
        - ticket_id
        - flagger_id
        - creator_id
      type: object
      properties:
        ticket_id:
          type: integer
          description: Ticket ID of the flagged Ticket
          example: 1
        flagger_id:
          type: integer
          description: User ID of the support agent who flagged this ticket
          example: 2
        creator_id:
          type: integer
          description: User ID of the student who created this ticket
          example: 1
      xml:
        name: Flagged_Post
    
    Response:
      required:
        - response_id
        - ticket_id
        - response
        - responder_id
        - response_timestamp
      type: object
      properties:
        response_id:
          type: integer
          description: Internal ID of the response for the given ticket.
          example: 2
        ticket_id:
          type: integer
          description: Ticket ID for which this response was given 
          example: 1
        response:
          type: string
          description: "String value of the response."
          example: "Query resolved!!"
        responder_id:
          type: integer
          description: User ID of the support agent who responded
          example: 4
        response_timestamp:
          type: string
          format: date time
          description: Python timestamp for the response when it was posted
          example: "Fri, 10 Mar 2023 06:36:58 GMT"
      xml:
        name: Response

  securitySchemes:
    secret_authtoken:
      type: apiKey
      name: secret_authtoken
      in: header